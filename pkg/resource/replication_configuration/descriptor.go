// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package replication_configuration

import (
	svcapitypes "github.com/aws-controllers-k8s/ecr-controller/apis/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktypes "github.com/aws-controllers-k8s/runtime/pkg/types"
	"k8s.io/apimachinery/pkg/runtime/schema"
	rtclient "sigs.k8s.io/controller-runtime/pkg/client"
)

var (
	// GroupVersionKind is the GroupVersionKind for ReplicationConfiguration
	GroupVersionKind = svcapitypes.GroupVersion.WithKind("ReplicationConfiguration")

	// GroupKind is the GroupKind for ReplicationConfiguration
	GroupKind = GroupVersionKind.GroupKind()
)

var _ acktypes.AWSResourceDescriptor = &resourceDescriptor{}

type resourceDescriptor struct{}

// GroupVersionKind returns the AWS resource's GroupVersionKind
func (d *resourceDescriptor) GroupVersionKind() schema.GroupVersionKind {
	return GroupVersionKind
}

// EmptyRuntimeObject returns an empty object of this resource type
func (d *resourceDescriptor) EmptyRuntimeObject() rtclient.Object {
	return &svcapitypes.ReplicationConfiguration{}
}

// ResourceFromRuntimeObject returns an AWSResource from the supplied
// RuntimeObject
func (d *resourceDescriptor) ResourceFromRuntimeObject(obj rtclient.Object) acktypes.AWSResource {
	return newResource(nil, obj.(*svcapitypes.ReplicationConfiguration))
}

// Delta returns an `ackcompare.Delta` object containing the difference between
// one `AWSResource` and another.
func (d *resourceDescriptor) Delta(a, b acktypes.AWSResource) *ackcompare.Delta {
	return nil // Simplified for now
}

// IsManaged returns true if the supplied AWSResource is under the management
// of an ACK service controller. What this means in practice is that the
// underlying custom resource (CR) in the AWSResource has had a resource
// finalizer associated with it.
func (d *resourceDescriptor) IsManaged(r acktypes.AWSResource) bool {
	return r.RuntimeObject().GetFinalizers() != nil
}

// MarkAdopted marks the AWSResource as adopted
func (d *resourceDescriptor) MarkAdopted(r acktypes.AWSResource) {
	// Mark the resource as adopted (implementation simplified)
}

// MarkManaged marks the AWSResource as managed
func (d *resourceDescriptor) MarkManaged(r acktypes.AWSResource) {
	// Mark the resource as managed (implementation simplified)
}

// MarkUnmanaged marks the AWSResource as unmanaged
func (d *resourceDescriptor) MarkUnmanaged(r acktypes.AWSResource) {
	// Mark the resource as unmanaged (implementation simplified)
}
