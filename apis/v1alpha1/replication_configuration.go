// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ReplicationRule represents a single replication rule
type ReplicationRule struct {
	// An array of objects representing the destination for a replication rule.
	Destinations []*ReplicationDestination `json:"destinations"`
	// An array of objects representing the filters for a replication rule.
	RepositoryFilters []*RepositoryFilter `json:"repositoryFilters,omitempty"`
}

// RepositoryFilter represents a filter for repositories in replication rules
type RepositoryFilter struct {
	// The repository filter details.
	Filter *string `json:"filter"`
	// The repository filter type.
	FilterType *string `json:"filterType"`
}

// ReplicationConfigurationForRegistry represents the replication configuration for a registry
type ReplicationConfigurationForRegistry struct {
	// An array of objects representing the replication rules for a replication configuration.
	Rules []*ReplicationRule `json:"rules"`
}

// ReplicationConfigurationSpec defines the desired state of ReplicationConfiguration.
//
// An object representing the replication configuration for an ECR registry.
type ReplicationConfigurationSpec struct {

	// The replication configuration for a registry.
	ReplicationConfiguration *ReplicationConfigurationForRegistry `json:"replicationConfiguration"`
	// The Amazon Web Services account ID associated with the registry to configure
	// replication for. If you do not specify a registry, the default registry is
	// assumed.
	//
	// Regex Pattern: `^[0-9]{12}$`
	RegistryID *string `json:"registryID,omitempty"`
}

// ReplicationConfigurationStatus defines the observed state of ReplicationConfiguration
type ReplicationConfigurationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
}

// ReplicationConfiguration is the Schema for the ReplicationConfigurations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="REGISTRY-ID",type=string,priority=0,JSONPath=`.spec.registryID`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
type ReplicationConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicationConfigurationSpec   `json:"spec,omitempty"`
	Status            ReplicationConfigurationStatus `json:"status,omitempty"`
}

// ReplicationConfigurationList contains a list of ReplicationConfiguration
// +kubebuilder:object:root=true
type ReplicationConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicationConfiguration `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ReplicationConfiguration{}, &ReplicationConfigurationList{})
}
