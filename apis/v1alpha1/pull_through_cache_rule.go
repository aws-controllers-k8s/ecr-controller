// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PullThroughCacheRuleSpec defines the desired state of PullThroughCacheRule.
//
// The details of a pull through cache rule.
type PullThroughCacheRuleSpec struct {

	// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager
	// secret that identifies the credentials to authenticate to the upstream registry.
	//
	// Regex Pattern: `^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$`
	CredentialARN *string `json:"credentialARN,omitempty"`
	// Amazon Resource Name (ARN) of the IAM role to be assumed by Amazon ECR to
	// authenticate to the ECR upstream registry. This role must be in the same
	// account as the registry that you are configuring.
	CustomRoleARN *string `json:"customRoleARN,omitempty"`
	// The repository name prefix to use when caching images from the source registry.
	//
	// There is always an assumed / applied to the end of the prefix. If you specify
	// ecr-public as the prefix, Amazon ECR treats that as ecr-public/.
	//
	// Regex Pattern: `^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$`
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	ECRRepositoryPrefix *string `json:"ecrRepositoryPrefix"`
	// The Amazon Web Services account ID associated with the registry to create
	// the pull through cache rule for. If you do not specify a registry, the default
	// registry is assumed.
	//
	// Regex Pattern: `^[0-9]{12}$`
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	RegistryID *string `json:"registryID,omitempty"`
	// The name of the upstream registry.
	UpstreamRegistry *string `json:"upstreamRegistry,omitempty"`
	// The registry URL of the upstream public registry to use as the source for
	// the pull through cache rule. The following is the syntax to use for each
	// supported upstream registry.
	//
	//   - Amazon ECR (ecr) – .dkr.ecr..amazonaws.com
	//
	//   - Amazon ECR Public (ecr-public) – public.ecr.aws
	//
	//   - Docker Hub (docker-hub) – registry-1.docker.io
	//
	//   - GitHub Container Registry (github-container-registry) – ghcr.io
	//
	//   - GitLab Container Registry (gitlab-container-registry) – registry.gitlab.com
	//
	//   - Kubernetes (k8s) – registry.k8s.io
	//
	//   - Microsoft Azure Container Registry (azure-container-registry) – .azurecr.io
	//
	//   - Quay (quay) – quay.io
	//
	// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
	// +kubebuilder:validation:Required
	UpstreamRegistryURL *string `json:"upstreamRegistryURL"`
	// The repository name prefix of the upstream registry to match with the upstream
	// repository name. When this field isn't specified, Amazon ECR will use the
	// ROOT.
	//
	// Regex Pattern: `^((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*/?|ROOT)$`
	UpstreamRepositoryPrefix *string `json:"upstreamRepositoryPrefix,omitempty"`
}

// PullThroughCacheRuleStatus defines the observed state of PullThroughCacheRule
type PullThroughCacheRuleStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The date and time, in JavaScript date format, when the pull through cache
	// rule was created.
	// +kubebuilder:validation:Optional
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
}

// PullThroughCacheRule is the Schema for the PullThroughCacheRules API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type PullThroughCacheRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PullThroughCacheRuleSpec   `json:"spec,omitempty"`
	Status            PullThroughCacheRuleStatus `json:"status,omitempty"`
}

// PullThroughCacheRuleList contains a list of PullThroughCacheRule
// +kubebuilder:object:root=true
type PullThroughCacheRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PullThroughCacheRule `json:"items"`
}

func init() {
	SchemeBuilder.Register(&PullThroughCacheRule{}, &PullThroughCacheRuleList{})
}
